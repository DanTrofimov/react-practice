{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","messaging","triggerNotification","token","a","data","notification","title","body","image","to","options","method","headers","JSON","stringify","fetch","App","useEffect","requestPermission","then","getToken","vapidKey","tokenReceived","setToken","useState","imgSrc","message","setMessage","modalOpen","setModalOpen","Promise","resolve","onMessage","payload","console","log","className","src","alt","onClick","open","onClose","center","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAaAA,IAASC,cAVY,CACjBC,OAAQC,0CACRC,WAAYD,+BACZE,UAAWF,eACXG,cAAeH,2BACfI,kBAAmBJ,eACnBK,MAAOL,8CAMJ,IAAMM,EAAYT,IAASS,YAWrBC,EAAmB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,4DACdT,sCACXU,EAAO,CACTC,aAAc,CACVC,MAAO,gBACPC,KAAM,eACNC,MAAO,2EAEXC,GAAIP,GAEFQ,EAAU,CACZC,OAAQ,OACRC,QAAS,CAEL,eAAgB,mBAChB,cAAgB,OAAhB,OAAwBlB,6JAE5Ba,KAAMM,KAAKC,UAAUV,IAjBM,SAmBzBW,MAlBWrB,sCAkBKgB,GAnBS,2CAAH,sD,GAsBjBnB,EAAf,E,oBCUeyB,MArDf,WAGIC,qBAAU,WACNjB,EAAUkB,oBAAoBC,MAAK,WACjC,OAAOnB,EAAUoB,SAAS,CAAEC,SAAU3B,+FACrCyB,MAAK,SAACG,GAEDA,GACAC,EAASD,SATV,MAemBE,mBAAS,CAAElB,MAAO,GAAIC,KAAM,GAAIkB,OAAQ,KAf3D,mBAeJC,EAfI,KAeKC,EAfL,OAgBeH,mBAAS,IAhBxB,mBAgBJtB,EAhBI,KAgBGqB,EAhBH,OAiBuBC,oBAAS,GAjBhC,mBAiBJI,EAjBI,KAiBOC,EAjBP,KA6BX,ODhBA,IAAIC,SAAQ,SAACC,GACT/B,EAAUgC,WAAU,SAACC,GACjBC,QAAQC,IAAI,cAAeF,GAC3BF,EAAQE,SCIId,MAAK,SAAAc,GACrBN,EAAW,CACPrB,MAAO2B,EAAQ5B,aAAaC,MAC5BC,KAAM0B,EAAQ5B,aAAaE,KAC3BkB,OAAQQ,EAAQ5B,aAAaG,QAEjCqB,GAAa,MAIjB,sBAAKO,UAAU,MAAf,UACI,sBAAKA,UAAU,OAAf,UACI,qBAAKC,IAAI,+EAA+EC,IAAI,OAAOF,UAAU,SAC7G,gDACA,wBACIA,UAAU,iBACVG,QAAS,kBAAMtC,EAAoBC,IAFvC,0BAMA,mBAAGkC,UAAU,QAAb,SAAuBlC,OAE3B,eAAC,IAAD,CAAOsC,KAAMZ,EAAWa,QAAS,kBAAMZ,GAAa,IAAQa,QAAM,EAAlE,UACI,6BAAMhB,EAAQpB,QACd,4BACMoB,EAAQnB,OAEd,qBAAK8B,IAAKX,EAAQD,OAAQa,IAAI,GAAGF,UAAU,uBCxCxCO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,EAAQ,IAAUC,SAElBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.67f2f05e.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n// client web app's firebase configuration\r\nlet firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\n// init of client firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const messaging = firebase.messaging();\r\n\r\nexport const onMessageListener = () =>\r\n    new Promise((resolve) => {\r\n        messaging.onMessage((payload) => {\r\n            console.log(\"push data: \", payload);\r\n            resolve(payload);\r\n        });\r\n    });\r\n\r\n// try to trigger notification on client\r\nexport const triggerNotification = async (token) => {\r\n    const endpoint = process.env.REACT_APP_BASE_API;\r\n    const data = {\r\n        notification: {\r\n            title: \"Message Title\",\r\n            body: \"Message body\",\r\n            image: \"https://medialeaks.ru/wp-content/uploads/2018/11/Sai--t-Arte--m-273.jpg\"\r\n        },\r\n        to: token\r\n    };\r\n    const options = {\r\n        method: 'POST',\r\n        headers: {\r\n\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `key=${process.env.REACT_APP_SERVER_TOKEN}`\r\n        },\r\n        body: JSON.stringify(data)\r\n    };\r\n    await fetch(endpoint, options);\r\n};\r\n\r\nexport default firebase;","import './App.css';\r\nimport { useEffect, useState } from \"react\";\r\nimport { messaging, onMessageListener, triggerNotification } from \"./firebase\";\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nfunction App() {\r\n\r\n    // need to get a token for messaging\r\n    useEffect(()=>{\r\n        messaging.requestPermission().then(()=>{\r\n          return messaging.getToken({ vapidKey: process.env.REACT_APP_VAPID_KEY });\r\n        }).then((tokenReceived)=>{\r\n          // here we can send a token to our backend\r\n            if (tokenReceived) {\r\n                setToken(tokenReceived);\r\n                // here we can send a token to our backend\r\n            }\r\n        })\r\n    });\r\n\r\n    const [message, setMessage] = useState({ title: \"\", body: \"\", imgSrc: \"\" });\r\n    const [token, setToken] = useState(\"\");\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n\r\n    // getting data from the notification\r\n    onMessageListener().then(payload => {\r\n        setMessage({\r\n            title: payload.notification.title,\r\n            body: payload.notification.body,\r\n            imgSrc: payload.notification.image\r\n        });\r\n        setModalOpen(true)\r\n    });\r\n\r\n    return (\r\n    <div className=\"app\">\r\n        <div className=\"info\">\r\n            <img src=\"https://firebase.google.com/downloads/brand-guidelines/PNG/logo-vertical.png\" alt=\"logo\" className=\"logo\"/>\r\n            <p>React App + FCM</p>\r\n            <button\r\n                className=\"trigger-button\"\r\n                onClick={() => triggerNotification(token)}\r\n            >\r\n                trigger push\r\n            </button>\r\n            <p className=\"token\">{ token }</p>\r\n        </div>\r\n        <Modal open={modalOpen} onClose={() => setModalOpen(false)} center>\r\n            <h2>{ message.title }</h2>\r\n            <p>\r\n                { message.body }\r\n            </p>\r\n            <img src={message.imgSrc} alt=\"\" className=\"message-img\"/>\r\n        </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nrequire('dotenv').config();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}